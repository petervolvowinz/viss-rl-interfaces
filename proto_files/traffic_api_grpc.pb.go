// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: traffic_api.proto

package base

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrafficServiceClient is the client API for TrafficService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrafficServiceClient interface {
	/// Play a playback or start recording.
	PlayTraffic(ctx context.Context, in *PlaybackInfos, opts ...grpc.CallOption) (*PlaybackInfos, error)
	/// Get continious status of playback states.
	PlayTrafficStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TrafficService_PlayTrafficStatusClient, error)
}

type trafficServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrafficServiceClient(cc grpc.ClientConnInterface) TrafficServiceClient {
	return &trafficServiceClient{cc}
}

func (c *trafficServiceClient) PlayTraffic(ctx context.Context, in *PlaybackInfos, opts ...grpc.CallOption) (*PlaybackInfos, error) {
	out := new(PlaybackInfos)
	err := c.cc.Invoke(ctx, "/base.TrafficService/PlayTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) PlayTrafficStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TrafficService_PlayTrafficStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &TrafficService_ServiceDesc.Streams[0], "/base.TrafficService/PlayTrafficStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &trafficServicePlayTrafficStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrafficService_PlayTrafficStatusClient interface {
	Recv() (*PlaybackInfos, error)
	grpc.ClientStream
}

type trafficServicePlayTrafficStatusClient struct {
	grpc.ClientStream
}

func (x *trafficServicePlayTrafficStatusClient) Recv() (*PlaybackInfos, error) {
	m := new(PlaybackInfos)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrafficServiceServer is the server API for TrafficService service.
// All implementations must embed UnimplementedTrafficServiceServer
// for forward compatibility
type TrafficServiceServer interface {
	/// Play a playback or start recording.
	PlayTraffic(context.Context, *PlaybackInfos) (*PlaybackInfos, error)
	/// Get continious status of playback states.
	PlayTrafficStatus(*Empty, TrafficService_PlayTrafficStatusServer) error
	mustEmbedUnimplementedTrafficServiceServer()
}

// UnimplementedTrafficServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrafficServiceServer struct {
}

func (UnimplementedTrafficServiceServer) PlayTraffic(context.Context, *PlaybackInfos) (*PlaybackInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayTraffic not implemented")
}
func (UnimplementedTrafficServiceServer) PlayTrafficStatus(*Empty, TrafficService_PlayTrafficStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method PlayTrafficStatus not implemented")
}
func (UnimplementedTrafficServiceServer) mustEmbedUnimplementedTrafficServiceServer() {}

// UnsafeTrafficServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrafficServiceServer will
// result in compilation errors.
type UnsafeTrafficServiceServer interface {
	mustEmbedUnimplementedTrafficServiceServer()
}

func RegisterTrafficServiceServer(s grpc.ServiceRegistrar, srv TrafficServiceServer) {
	s.RegisterService(&TrafficService_ServiceDesc, srv)
}

func _TrafficService_PlayTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaybackInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).PlayTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.TrafficService/PlayTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).PlayTraffic(ctx, req.(*PlaybackInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_PlayTrafficStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrafficServiceServer).PlayTrafficStatus(m, &trafficServicePlayTrafficStatusServer{stream})
}

type TrafficService_PlayTrafficStatusServer interface {
	Send(*PlaybackInfos) error
	grpc.ServerStream
}

type trafficServicePlayTrafficStatusServer struct {
	grpc.ServerStream
}

func (x *trafficServicePlayTrafficStatusServer) Send(m *PlaybackInfos) error {
	return x.ServerStream.SendMsg(m)
}

// TrafficService_ServiceDesc is the grpc.ServiceDesc for TrafficService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrafficService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base.TrafficService",
	HandlerType: (*TrafficServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayTraffic",
			Handler:    _TrafficService_PlayTraffic_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlayTrafficStatus",
			Handler:       _TrafficService_PlayTrafficStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traffic_api.proto",
}

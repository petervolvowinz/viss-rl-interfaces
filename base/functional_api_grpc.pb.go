// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: functional_api.proto

package base

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FunctionalServiceClient is the client API for FunctionalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunctionalServiceClient interface {
	OpenPassWindow(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Empty, error)
	ClosePassWindow(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Empty, error)
	SetFanSpeed(ctx context.Context, in *SenderInfo, opts ...grpc.CallOption) (*Empty, error)
	SubscribeToFanSpeed(ctx context.Context, in *SubscriberRequest, opts ...grpc.CallOption) (FunctionalService_SubscribeToFanSpeedClient, error)
}

type functionalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFunctionalServiceClient(cc grpc.ClientConnInterface) FunctionalServiceClient {
	return &functionalServiceClient{cc}
}

func (c *functionalServiceClient) OpenPassWindow(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/base.FunctionalService/OpenPassWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionalServiceClient) ClosePassWindow(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/base.FunctionalService/ClosePassWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionalServiceClient) SetFanSpeed(ctx context.Context, in *SenderInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/base.FunctionalService/SetFanSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionalServiceClient) SubscribeToFanSpeed(ctx context.Context, in *SubscriberRequest, opts ...grpc.CallOption) (FunctionalService_SubscribeToFanSpeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &FunctionalService_ServiceDesc.Streams[0], "/base.FunctionalService/SubscribeToFanSpeed", opts...)
	if err != nil {
		return nil, err
	}
	x := &functionalServiceSubscribeToFanSpeedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FunctionalService_SubscribeToFanSpeedClient interface {
	Recv() (*Value, error)
	grpc.ClientStream
}

type functionalServiceSubscribeToFanSpeedClient struct {
	grpc.ClientStream
}

func (x *functionalServiceSubscribeToFanSpeedClient) Recv() (*Value, error) {
	m := new(Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FunctionalServiceServer is the server API for FunctionalService service.
// All implementations must embed UnimplementedFunctionalServiceServer
// for forward compatibility
type FunctionalServiceServer interface {
	OpenPassWindow(context.Context, *ClientId) (*Empty, error)
	ClosePassWindow(context.Context, *ClientId) (*Empty, error)
	SetFanSpeed(context.Context, *SenderInfo) (*Empty, error)
	SubscribeToFanSpeed(*SubscriberRequest, FunctionalService_SubscribeToFanSpeedServer) error
	mustEmbedUnimplementedFunctionalServiceServer()
}

// UnimplementedFunctionalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFunctionalServiceServer struct {
}

func (UnimplementedFunctionalServiceServer) OpenPassWindow(context.Context, *ClientId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPassWindow not implemented")
}
func (UnimplementedFunctionalServiceServer) ClosePassWindow(context.Context, *ClientId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePassWindow not implemented")
}
func (UnimplementedFunctionalServiceServer) SetFanSpeed(context.Context, *SenderInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFanSpeed not implemented")
}
func (UnimplementedFunctionalServiceServer) SubscribeToFanSpeed(*SubscriberRequest, FunctionalService_SubscribeToFanSpeedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToFanSpeed not implemented")
}
func (UnimplementedFunctionalServiceServer) mustEmbedUnimplementedFunctionalServiceServer() {}

// UnsafeFunctionalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunctionalServiceServer will
// result in compilation errors.
type UnsafeFunctionalServiceServer interface {
	mustEmbedUnimplementedFunctionalServiceServer()
}

func RegisterFunctionalServiceServer(s grpc.ServiceRegistrar, srv FunctionalServiceServer) {
	s.RegisterService(&FunctionalService_ServiceDesc, srv)
}

func _FunctionalService_OpenPassWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionalServiceServer).OpenPassWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.FunctionalService/OpenPassWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionalServiceServer).OpenPassWindow(ctx, req.(*ClientId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionalService_ClosePassWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionalServiceServer).ClosePassWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.FunctionalService/ClosePassWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionalServiceServer).ClosePassWindow(ctx, req.(*ClientId))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionalService_SetFanSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SenderInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionalServiceServer).SetFanSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.FunctionalService/SetFanSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionalServiceServer).SetFanSpeed(ctx, req.(*SenderInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionalService_SubscribeToFanSpeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FunctionalServiceServer).SubscribeToFanSpeed(m, &functionalServiceSubscribeToFanSpeedServer{stream})
}

type FunctionalService_SubscribeToFanSpeedServer interface {
	Send(*Value) error
	grpc.ServerStream
}

type functionalServiceSubscribeToFanSpeedServer struct {
	grpc.ServerStream
}

func (x *functionalServiceSubscribeToFanSpeedServer) Send(m *Value) error {
	return x.ServerStream.SendMsg(m)
}

// FunctionalService_ServiceDesc is the grpc.ServiceDesc for FunctionalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FunctionalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base.FunctionalService",
	HandlerType: (*FunctionalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenPassWindow",
			Handler:    _FunctionalService_OpenPassWindow_Handler,
		},
		{
			MethodName: "ClosePassWindow",
			Handler:    _FunctionalService_ClosePassWindow_Handler,
		},
		{
			MethodName: "SetFanSpeed",
			Handler:    _FunctionalService_SetFanSpeed_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToFanSpeed",
			Handler:       _FunctionalService_SubscribeToFanSpeed_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "functional_api.proto",
}

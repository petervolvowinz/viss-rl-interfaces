//* Data types for RemotiveBroker operations.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.1
// source: common.proto

package base

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

/// Supported E2E profiles.
type E2EProfile int32

const (
	E2EProfile_PROFILE_AR_01A E2EProfile = 0 /// Autosar 1A
)

// Enum value maps for E2EProfile.
var (
	E2EProfile_name = map[int32]string{
		0: "PROFILE_AR_01A",
	}
	E2EProfile_value = map[string]int32{
		"PROFILE_AR_01A": 0,
	}
)

func (x E2EProfile) Enum() *E2EProfile {
	p := new(E2EProfile)
	*p = x
	return p
}

func (x E2EProfile) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (E2EProfile) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (E2EProfile) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x E2EProfile) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use E2EProfile.Descriptor instead.
func (E2EProfile) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

/// Symbolic message representing no argument needed or provided.
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

//*
// Identifier for client. Used in subscribe and publish. Subscriptions will not
// receive updates from publish calls with the same ClientId.
type ClientId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` /// Identifier as string
}

func (x *ClientId) Reset() {
	*x = ClientId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientId) ProtoMessage() {}

func (x *ClientId) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientId.ProtoReflect.Descriptor instead.
func (*ClientId) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *ClientId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

/// Identifier for a signal.
type SignalId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`           /// Name of signal.
	Namespace *NameSpace `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"` /// Which name space signal belongs in.
}

func (x *SignalId) Reset() {
	*x = SignalId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalId) ProtoMessage() {}

func (x *SignalId) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalId.ProtoReflect.Descriptor instead.
func (*SignalId) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *SignalId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SignalId) GetNamespace() *NameSpace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

/// Information about a signal. Including name and all meta data fields.
type SignalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *SignalId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MetaData *MetaData `protobuf:"bytes,2,opt,name=metaData,proto3" json:"metaData,omitempty"`
}

func (x *SignalInfo) Reset() {
	*x = SignalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalInfo) ProtoMessage() {}

func (x *SignalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalInfo.ProtoReflect.Descriptor instead.
func (*SignalInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *SignalInfo) GetId() *SignalId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SignalInfo) GetMetaData() *MetaData {
	if x != nil {
		return x.MetaData
	}
	return nil
}

//*
// Multiplexing information.
// Some signal databases allow "multiplexing" or "unions" in their frame
// information. IF a signal is in `select` mode, the value of the signal will
// act as a filter for signals which are in `filter` mode.
type Multiplex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Mode:
	//	*Multiplex_None
	//	*Multiplex_Select
	//	*Multiplex_Filter
	Mode isMultiplex_Mode `protobuf_oneof:"mode"`
}

func (x *Multiplex) Reset() {
	*x = Multiplex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Multiplex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Multiplex) ProtoMessage() {}

func (x *Multiplex) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Multiplex.ProtoReflect.Descriptor instead.
func (*Multiplex) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (m *Multiplex) GetMode() isMultiplex_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (x *Multiplex) GetNone() *Empty {
	if x, ok := x.GetMode().(*Multiplex_None); ok {
		return x.None
	}
	return nil
}

func (x *Multiplex) GetSelect() *Empty {
	if x, ok := x.GetMode().(*Multiplex_Select); ok {
		return x.Select
	}
	return nil
}

func (x *Multiplex) GetFilter() int32 {
	if x, ok := x.GetMode().(*Multiplex_Filter); ok {
		return x.Filter
	}
	return 0
}

type isMultiplex_Mode interface {
	isMultiplex_Mode()
}

type Multiplex_None struct {
	None *Empty `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type Multiplex_Select struct {
	Select *Empty `protobuf:"bytes,2,opt,name=select,proto3,oneof"`
}

type Multiplex_Filter struct {
	Filter int32 `protobuf:"varint,3,opt,name=filter,proto3,oneof"`
}

func (*Multiplex_None) isMultiplex_Mode() {}

func (*Multiplex_Select) isMultiplex_Mode() {}

func (*Multiplex_Filter) isMultiplex_Mode() {}

/// Information about E2E configuration.
type E2E struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile       E2EProfile `protobuf:"varint,1,opt,name=profile,proto3,enum=base.E2EProfile" json:"profile,omitempty"` /// Profile.
	DataId        uint32     `protobuf:"varint,2,opt,name=dataId,proto3" json:"dataId,omitempty"`                        /// Data ID for CRC calculation.
	SignalCrc     string     `protobuf:"bytes,3,opt,name=signalCrc,proto3" json:"signalCrc,omitempty"`                   /// Name of signal for CRC field.
	SignalCounter string     `protobuf:"bytes,4,opt,name=signalCounter,proto3" json:"signalCounter,omitempty"`           /// Name of signal for counter field.
}

func (x *E2E) Reset() {
	*x = E2E{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *E2E) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*E2E) ProtoMessage() {}

func (x *E2E) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use E2E.ProtoReflect.Descriptor instead.
func (*E2E) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *E2E) GetProfile() E2EProfile {
	if x != nil {
		return x.Profile
	}
	return E2EProfile_PROFILE_AR_01A
}

func (x *E2E) GetDataId() uint32 {
	if x != nil {
		return x.DataId
	}
	return 0
}

func (x *E2E) GetSignalCrc() string {
	if x != nil {
		return x.SignalCrc
	}
	return ""
}

func (x *E2E) GetSignalCounter() string {
	if x != nil {
		return x.SignalCounter
	}
	return ""
}

/// Group inside of frame.
type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start  uint32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`   /// Byte offset in frame for group.
	Length uint32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"` /// Byte length of group.
	E2E    *E2E   `protobuf:"bytes,3,opt,name=e2e,proto3" json:"e2e,omitempty"`        /// E2E property for group.
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *Group) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Group) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Group) GetE2E() *E2E {
	if x != nil {
		return x.E2E
	}
	return nil
}

//*
// Collection of all meta data for a signal.
//
// RemotiveBroker support several databases. The following attributes are read
// from the database running on the RemotiveBroker.
type MetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string     `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`  /// Description for signal.
	Max         float32    `protobuf:"fixed32,12,opt,name=max,proto3" json:"max,omitempty"`               /// Maximum allowed value.
	Min         float32    `protobuf:"fixed32,13,opt,name=min,proto3" json:"min,omitempty"`               /// Minimum allowed value.
	Unit        string     `protobuf:"bytes,7,opt,name=unit,proto3" json:"unit,omitempty"`                /// Unit of the signal value.
	Size        int32      `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`               /// Size of signal value when packed in frame.
	IsRaw       bool       `protobuf:"varint,9,opt,name=isRaw,proto3" json:"isRaw,omitempty"`             /// Is binary data?
	Factor      float64    `protobuf:"fixed64,10,opt,name=factor,proto3" json:"factor,omitempty"`         /// Multiplication faction used for encoding and decoding value in frame.
	Offset      float64    `protobuf:"fixed64,11,opt,name=offset,proto3" json:"offset,omitempty"`         /// Offset used for encoding and decoding value in frame.
	Sender      []string   `protobuf:"bytes,14,rep,name=sender,proto3" json:"sender,omitempty"`           /// List of named senders of signals.
	Receiver    []string   `protobuf:"bytes,15,rep,name=receiver,proto3" json:"receiver,omitempty"`       /// List of named receivers of signal.
	CycleTime   float32    `protobuf:"fixed32,16,opt,name=cycleTime,proto3" json:"cycleTime,omitempty"`   /// Cadence for sending signal in milliseconds.
	StartValue  float32    `protobuf:"fixed32,17,opt,name=startValue,proto3" json:"startValue,omitempty"` /// Initial value to use before publishing.
	Multiplex   *Multiplex `protobuf:"bytes,18,opt,name=multiplex,proto3" json:"multiplex,omitempty"`     /// Frame multiplexing information.
	E2E         *E2E       `protobuf:"bytes,19,opt,name=e2e,proto3" json:"e2e,omitempty"`                 /// E2e information about frame.
	Groups      []*Group   `protobuf:"bytes,20,rep,name=groups,proto3" json:"groups,omitempty"`           /// Groups inside frame.
	FrameId     uint32     `protobuf:"varint,21,opt,name=frameId,proto3" json:"frameId,omitempty"`        /// Assosiated identification number for frame.
}

func (x *MetaData) Reset() {
	*x = MetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaData) ProtoMessage() {}

func (x *MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaData.ProtoReflect.Descriptor instead.
func (*MetaData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *MetaData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MetaData) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *MetaData) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *MetaData) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *MetaData) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MetaData) GetIsRaw() bool {
	if x != nil {
		return x.IsRaw
	}
	return false
}

func (x *MetaData) GetFactor() float64 {
	if x != nil {
		return x.Factor
	}
	return 0
}

func (x *MetaData) GetOffset() float64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MetaData) GetSender() []string {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *MetaData) GetReceiver() []string {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *MetaData) GetCycleTime() float32 {
	if x != nil {
		return x.CycleTime
	}
	return 0
}

func (x *MetaData) GetStartValue() float32 {
	if x != nil {
		return x.StartValue
	}
	return 0
}

func (x *MetaData) GetMultiplex() *Multiplex {
	if x != nil {
		return x.Multiplex
	}
	return nil
}

func (x *MetaData) GetE2E() *E2E {
	if x != nil {
		return x.E2E
	}
	return nil
}

func (x *MetaData) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *MetaData) GetFrameId() uint32 {
	if x != nil {
		return x.FrameId
	}
	return 0
}

/// Identifier for a name space.
type NameSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` /// Name of name space, which in turn is typically redirected in interfaces.json to an electrical interface.
}

func (x *NameSpace) Reset() {
	*x = NameSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameSpace) ProtoMessage() {}

func (x *NameSpace) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameSpace.ProtoReflect.Descriptor instead.
func (*NameSpace) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *NameSpace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

/// Information about network
type NetworkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace   *NameSpace `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`     /// Corresponding name space.
	Type        string     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`               /// Type of network as text. Eg "can", "lin" etc.
	Description string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"` /// Description text about network.
}

func (x *NetworkInfo) Reset() {
	*x = NetworkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInfo) ProtoMessage() {}

func (x *NetworkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInfo.ProtoReflect.Descriptor instead.
func (*NetworkInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *NetworkInfo) GetNamespace() *NameSpace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *NetworkInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NetworkInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

/// Information about a frame and it's signals.
type FrameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignalInfo *SignalInfo   `protobuf:"bytes,1,opt,name=signalInfo,proto3" json:"signalInfo,omitempty"` /// Information about the frame itself.
	ChildInfo  []*SignalInfo `protobuf:"bytes,2,rep,name=childInfo,proto3" json:"childInfo,omitempty"`   /// Information about signals included in frame.
}

func (x *FrameInfo) Reset() {
	*x = FrameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameInfo) ProtoMessage() {}

func (x *FrameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameInfo.ProtoReflect.Descriptor instead.
func (*FrameInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *FrameInfo) GetSignalInfo() *SignalInfo {
	if x != nil {
		return x.SignalInfo
	}
	return nil
}

func (x *FrameInfo) GetChildInfo() []*SignalInfo {
	if x != nil {
		return x.ChildInfo
	}
	return nil
}

/// Collection of information for several frames.
type Frames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frame []*FrameInfo `protobuf:"bytes,1,rep,name=frame,proto3" json:"frame,omitempty"` /// List of information about frames.
}

func (x *Frames) Reset() {
	*x = Frames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frames) ProtoMessage() {}

func (x *Frames) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frames.ProtoReflect.Descriptor instead.
func (*Frames) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *Frames) GetFrame() []*FrameInfo {
	if x != nil {
		return x.Frame
	}
	return nil
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1a, 0x0a,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x08, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x58, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x77, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x12,
	0x21, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f,
	0x6e, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x03,
	0x45, 0x32, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x32, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x43, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x43, 0x72, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x05, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x1b, 0x0a, 0x03, 0x65, 0x32, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x32, 0x65, 0x52, 0x03, 0x65, 0x32, 0x65, 0x22,
	0xbb, 0x03, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73,
	0x52, 0x61, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x52, 0x61, 0x77,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x78, 0x12, 0x1b, 0x0a, 0x03, 0x65, 0x32, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x32, 0x65, 0x52, 0x03, 0x65, 0x32, 0x65, 0x12, 0x23,
	0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x1f, 0x0a,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x72,
	0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x30, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x2f, 0x0a, 0x06, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x2a, 0x20, 0x0a, 0x0a, 0x45, 0x32, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x52, 0x5f, 0x30,
	0x31, 0x41, 0x10, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x3b, 0x62, 0x61, 0x73, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_common_proto_goTypes = []interface{}{
	(E2EProfile)(0),     // 0: base.E2eProfile
	(*Empty)(nil),       // 1: base.Empty
	(*ClientId)(nil),    // 2: base.ClientId
	(*SignalId)(nil),    // 3: base.SignalId
	(*SignalInfo)(nil),  // 4: base.SignalInfo
	(*Multiplex)(nil),   // 5: base.Multiplex
	(*E2E)(nil),         // 6: base.E2e
	(*Group)(nil),       // 7: base.Group
	(*MetaData)(nil),    // 8: base.MetaData
	(*NameSpace)(nil),   // 9: base.NameSpace
	(*NetworkInfo)(nil), // 10: base.NetworkInfo
	(*FrameInfo)(nil),   // 11: base.FrameInfo
	(*Frames)(nil),      // 12: base.Frames
}
var file_common_proto_depIdxs = []int32{
	9,  // 0: base.SignalId.namespace:type_name -> base.NameSpace
	3,  // 1: base.SignalInfo.id:type_name -> base.SignalId
	8,  // 2: base.SignalInfo.metaData:type_name -> base.MetaData
	1,  // 3: base.Multiplex.none:type_name -> base.Empty
	1,  // 4: base.Multiplex.select:type_name -> base.Empty
	0,  // 5: base.E2e.profile:type_name -> base.E2eProfile
	6,  // 6: base.Group.e2e:type_name -> base.E2e
	5,  // 7: base.MetaData.multiplex:type_name -> base.Multiplex
	6,  // 8: base.MetaData.e2e:type_name -> base.E2e
	7,  // 9: base.MetaData.groups:type_name -> base.Group
	9,  // 10: base.NetworkInfo.namespace:type_name -> base.NameSpace
	4,  // 11: base.FrameInfo.signalInfo:type_name -> base.SignalInfo
	4,  // 12: base.FrameInfo.childInfo:type_name -> base.SignalInfo
	11, // 13: base.Frames.frame:type_name -> base.FrameInfo
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Multiplex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*E2E); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Frames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_common_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Multiplex_None)(nil),
		(*Multiplex_Select)(nil),
		(*Multiplex_Filter)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.1
// source: system_api.proto

package base

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

/// Type for license status.
type LicenseStatus int32

const (
	LicenseStatus_UNSET            LicenseStatus = 0  /// No license.
	LicenseStatus_VALID            LicenseStatus = 1  /// Valid license.
	LicenseStatus_EXPIRED          LicenseStatus = 2  /// Expired.
	LicenseStatus_BADDATE          LicenseStatus = 3  /// Error, incorrect date.
	LicenseStatus_WRONGMACHINE     LicenseStatus = 4  /// Error, license not for this machine.
	LicenseStatus_INCOMPLETEJSON   LicenseStatus = 5  /// Error, Incomplete license file.
	LicenseStatus_INVALIDJSON      LicenseStatus = 6  /// Error, Incomplete license json file.
	LicenseStatus_BADSIGNATURE     LicenseStatus = 7  /// Error, Bad signature on license file.
	LicenseStatus_MALFORMED        LicenseStatus = 8  /// Error, reading license file.
	LicenseStatus_SERVERERROR      LicenseStatus = 9  /// Error, server side.
	LicenseStatus_NOTERMSAGREEMENT LicenseStatus = 10 /// Error, user has not accepted terms.
)

// Enum value maps for LicenseStatus.
var (
	LicenseStatus_name = map[int32]string{
		0:  "UNSET",
		1:  "VALID",
		2:  "EXPIRED",
		3:  "BADDATE",
		4:  "WRONGMACHINE",
		5:  "INCOMPLETEJSON",
		6:  "INVALIDJSON",
		7:  "BADSIGNATURE",
		8:  "MALFORMED",
		9:  "SERVERERROR",
		10: "NOTERMSAGREEMENT",
	}
	LicenseStatus_value = map[string]int32{
		"UNSET":            0,
		"VALID":            1,
		"EXPIRED":          2,
		"BADDATE":          3,
		"WRONGMACHINE":     4,
		"INCOMPLETEJSON":   5,
		"INVALIDJSON":      6,
		"BADSIGNATURE":     7,
		"MALFORMED":        8,
		"SERVERERROR":      9,
		"NOTERMSAGREEMENT": 10,
	}
)

func (x LicenseStatus) Enum() *LicenseStatus {
	p := new(LicenseStatus)
	*p = x
	return p
}

func (x LicenseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_system_api_proto_enumTypes[0].Descriptor()
}

func (LicenseStatus) Type() protoreflect.EnumType {
	return &file_system_api_proto_enumTypes[0]
}

func (x LicenseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseStatus.Descriptor instead.
func (LicenseStatus) EnumDescriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{0}
}

/// Configuration of server.
type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Network information.
	NetworkInfo []*NetworkInfo `protobuf:"bytes,1,rep,name=networkInfo,proto3" json:"networkInfo,omitempty"`
	/// Server configuration file `interfaces.json`.
	InterfacesJson []byte `protobuf:"bytes,2,opt,name=interfacesJson,proto3" json:"interfacesJson,omitempty"`
	/// IP address of server.
	PublicAddress string `protobuf:"bytes,4,opt,name=publicAddress,proto3" json:"publicAddress,omitempty"`
	/// Version of RemotiveBroker.
	ServerVersion string `protobuf:"bytes,5,opt,name=serverVersion,proto3" json:"serverVersion,omitempty"`
	/// Contains configuration file deprecation warnings, validation errors and similar
	InterfacesInfo string `protobuf:"bytes,6,opt,name=interfacesInfo,proto3" json:"interfacesInfo,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{0}
}

func (x *Configuration) GetNetworkInfo() []*NetworkInfo {
	if x != nil {
		return x.NetworkInfo
	}
	return nil
}

func (x *Configuration) GetInterfacesJson() []byte {
	if x != nil {
		return x.InterfacesJson
	}
	return nil
}

func (x *Configuration) GetPublicAddress() string {
	if x != nil {
		return x.PublicAddress
	}
	return ""
}

func (x *Configuration) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *Configuration) GetInterfacesInfo() string {
	if x != nil {
		return x.InterfacesInfo
	}
	return ""
}

/// Response from reload request.
type ReloadMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Status of reload operation.
	//
	// Types that are assignable to Status:
	//	*ReloadMessage_Configuration
	//	*ReloadMessage_ErrorMessage
	Status isReloadMessage_Status `protobuf_oneof:"status"`
}

func (x *ReloadMessage) Reset() {
	*x = ReloadMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadMessage) ProtoMessage() {}

func (x *ReloadMessage) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadMessage.ProtoReflect.Descriptor instead.
func (*ReloadMessage) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{1}
}

func (m *ReloadMessage) GetStatus() isReloadMessage_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *ReloadMessage) GetConfiguration() *Configuration {
	if x, ok := x.GetStatus().(*ReloadMessage_Configuration); ok {
		return x.Configuration
	}
	return nil
}

func (x *ReloadMessage) GetErrorMessage() string {
	if x, ok := x.GetStatus().(*ReloadMessage_ErrorMessage); ok {
		return x.ErrorMessage
	}
	return ""
}

type isReloadMessage_Status interface {
	isReloadMessage_Status()
}

type ReloadMessage_Configuration struct {
	/// New configuration from successfull reload operation.
	Configuration *Configuration `protobuf:"bytes,1,opt,name=configuration,proto3,oneof"`
}

type ReloadMessage_ErrorMessage struct {
	/// Response from failed reload operation.
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3,oneof"`
}

func (*ReloadMessage_Configuration) isReloadMessage_Status() {}

func (*ReloadMessage_ErrorMessage) isReloadMessage_Status() {}

/// File information.
type FileDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha256 string `protobuf:"bytes,1,opt,name=sha256,proto3" json:"sha256,omitempty"` /// File checksum.
	Path   string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`     /// File (path and filename) on server.
}

func (x *FileDescription) Reset() {
	*x = FileDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDescription) ProtoMessage() {}

func (x *FileDescription) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDescription.ProtoReflect.Descriptor instead.
func (*FileDescription) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{2}
}

func (x *FileDescription) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *FileDescription) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type FileDescriptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileDescriptions []*FileDescription `protobuf:"bytes,1,rep,name=fileDescriptions,proto3" json:"fileDescriptions,omitempty"`
}

func (x *FileDescriptions) Reset() {
	*x = FileDescriptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDescriptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDescriptions) ProtoMessage() {}

func (x *FileDescriptions) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDescriptions.ProtoReflect.Descriptor instead.
func (*FileDescriptions) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{3}
}

func (x *FileDescriptions) GetFileDescriptions() []*FileDescription {
	if x != nil {
		return x.FileDescriptions
	}
	return nil
}

//*
// Parameters for a file upload.
// SHA256 which is part of FileDescription only needs to be submitted in the
// last chunk.
type FileUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Data for upload.
	//
	// Types that are assignable to Data:
	//	*FileUploadRequest_FileDescription
	//	*FileUploadRequest_Chunk
	Data isFileUploadRequest_Data `protobuf_oneof:"data"`
}

func (x *FileUploadRequest) Reset() {
	*x = FileUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadRequest) ProtoMessage() {}

func (x *FileUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadRequest.ProtoReflect.Descriptor instead.
func (*FileUploadRequest) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{4}
}

func (m *FileUploadRequest) GetData() isFileUploadRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *FileUploadRequest) GetFileDescription() *FileDescription {
	if x, ok := x.GetData().(*FileUploadRequest_FileDescription); ok {
		return x.FileDescription
	}
	return nil
}

func (x *FileUploadRequest) GetChunk() []byte {
	if x, ok := x.GetData().(*FileUploadRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isFileUploadRequest_Data interface {
	isFileUploadRequest_Data()
}

type FileUploadRequest_FileDescription struct {
	FileDescription *FileDescription `protobuf:"bytes,1,opt,name=fileDescription,proto3,oneof"` /// Information about file to upload.
}

type FileUploadRequest_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"` /// Amount of chunks that will be sent for this file.
}

func (*FileUploadRequest_FileDescription) isFileUploadRequest_Data() {}

func (*FileUploadRequest_Chunk) isFileUploadRequest_Data() {}

//*
// Request for file chunk upload.
// Divide file in chunks of n bytes, where recommened n is 500000 bytes.
// SHA256 which is part of FileDescription only needs to be submitted in the
// last chunk.
type FileUploadChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileDescription *FileDescription `protobuf:"bytes,1,opt,name=fileDescription,proto3" json:"fileDescription,omitempty"` /// What file this chunk is for.
	Chunks          uint32           `protobuf:"varint,2,opt,name=chunks,proto3" json:"chunks,omitempty"`                  /// Amount of chunks.
	ChunkId         uint32           `protobuf:"varint,3,opt,name=chunkId,proto3" json:"chunkId,omitempty"`                /// Index of this chunk. Start with 0.
	Chunk           []byte           `protobuf:"bytes,4,opt,name=chunk,proto3" json:"chunk,omitempty"`                     /// Chunk data.
	CancelUpload    bool             `protobuf:"varint,5,opt,name=cancelUpload,proto3" json:"cancelUpload,omitempty"`      /// Cancel upload request.
	UploadTimeout   uint32           `protobuf:"varint,6,opt,name=uploadTimeout,proto3" json:"uploadTimeout,omitempty"`    /// Server side timeout (ms) for uploading all chunks which represents full file.
}

func (x *FileUploadChunkRequest) Reset() {
	*x = FileUploadChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUploadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadChunkRequest) ProtoMessage() {}

func (x *FileUploadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadChunkRequest.ProtoReflect.Descriptor instead.
func (*FileUploadChunkRequest) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{5}
}

func (x *FileUploadChunkRequest) GetFileDescription() *FileDescription {
	if x != nil {
		return x.FileDescription
	}
	return nil
}

func (x *FileUploadChunkRequest) GetChunks() uint32 {
	if x != nil {
		return x.Chunks
	}
	return 0
}

func (x *FileUploadChunkRequest) GetChunkId() uint32 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

func (x *FileUploadChunkRequest) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *FileUploadChunkRequest) GetCancelUpload() bool {
	if x != nil {
		return x.CancelUpload
	}
	return false
}

func (x *FileUploadChunkRequest) GetUploadTimeout() uint32 {
	if x != nil {
		return x.UploadTimeout
	}
	return 0
}

/// Response from file or file chunk upload.
type FileUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Result from upload.
	//
	// Types that are assignable to Data:
	//	*FileUploadResponse_Finished
	//	*FileUploadResponse_Cancelled
	//	*FileUploadResponse_ErrorMessage
	Data isFileUploadResponse_Data `protobuf_oneof:"data"`
}

func (x *FileUploadResponse) Reset() {
	*x = FileUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUploadResponse) ProtoMessage() {}

func (x *FileUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUploadResponse.ProtoReflect.Descriptor instead.
func (*FileUploadResponse) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{6}
}

func (m *FileUploadResponse) GetData() isFileUploadResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *FileUploadResponse) GetFinished() bool {
	if x, ok := x.GetData().(*FileUploadResponse_Finished); ok {
		return x.Finished
	}
	return false
}

func (x *FileUploadResponse) GetCancelled() bool {
	if x, ok := x.GetData().(*FileUploadResponse_Cancelled); ok {
		return x.Cancelled
	}
	return false
}

func (x *FileUploadResponse) GetErrorMessage() string {
	if x, ok := x.GetData().(*FileUploadResponse_ErrorMessage); ok {
		return x.ErrorMessage
	}
	return ""
}

type isFileUploadResponse_Data interface {
	isFileUploadResponse_Data()
}

type FileUploadResponse_Finished struct {
	Finished bool `protobuf:"varint,1,opt,name=finished,proto3,oneof"` /// Upload completed.
}

type FileUploadResponse_Cancelled struct {
	Cancelled bool `protobuf:"varint,2,opt,name=cancelled,proto3,oneof"` /// Upload canceled.
}

type FileUploadResponse_ErrorMessage struct {
	ErrorMessage string `protobuf:"bytes,3,opt,name=errorMessage,proto3,oneof"` /// Error with reason.
}

func (*FileUploadResponse_Finished) isFileUploadResponse_Data() {}

func (*FileUploadResponse_Cancelled) isFileUploadResponse_Data() {}

func (*FileUploadResponse_ErrorMessage) isFileUploadResponse_Data() {}

/// Response from file download request.
type FileDownloadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Result.
	//
	// Types that are assignable to Data:
	//	*FileDownloadResponse_Chunk
	//	*FileDownloadResponse_ErrorMessage
	Data isFileDownloadResponse_Data `protobuf_oneof:"data"`
}

func (x *FileDownloadResponse) Reset() {
	*x = FileDownloadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDownloadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDownloadResponse) ProtoMessage() {}

func (x *FileDownloadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDownloadResponse.ProtoReflect.Descriptor instead.
func (*FileDownloadResponse) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{7}
}

func (m *FileDownloadResponse) GetData() isFileDownloadResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *FileDownloadResponse) GetChunk() []byte {
	if x, ok := x.GetData().(*FileDownloadResponse_Chunk); ok {
		return x.Chunk
	}
	return nil
}

func (x *FileDownloadResponse) GetErrorMessage() string {
	if x, ok := x.GetData().(*FileDownloadResponse_ErrorMessage); ok {
		return x.ErrorMessage
	}
	return ""
}

type isFileDownloadResponse_Data interface {
	isFileDownloadResponse_Data()
}

type FileDownloadResponse_Chunk struct {
	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3,oneof"` /// File content.
}

type FileDownloadResponse_ErrorMessage struct {
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3,oneof"` /// Error with reason.
}

func (*FileDownloadResponse_Chunk) isFileDownloadResponse_Data() {}

func (*FileDownloadResponse_ErrorMessage) isFileDownloadResponse_Data() {}

/// Server license information.
type LicenseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           LicenseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=base.LicenseStatus" json:"status,omitempty"` /// Status of license.
	Json             []byte        `protobuf:"bytes,2,opt,name=json,proto3" json:"json,omitempty"`                              /// Verbatim json from the license data if BASE64-decodable.
	Expires          string        `protobuf:"bytes,3,opt,name=expires,proto3" json:"expires,omitempty"`                        /// Extracted from json for convenience.
	RequestId        string        `protobuf:"bytes,4,opt,name=requestId,proto3" json:"requestId,omitempty"`                    /// Info to use when requesting a new license.
	RequestMachineId []byte        `protobuf:"bytes,5,opt,name=requestMachineId,proto3" json:"requestMachineId,omitempty"`      /// Identifier for machine running server.
}

func (x *LicenseInfo) Reset() {
	*x = LicenseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseInfo) ProtoMessage() {}

func (x *LicenseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseInfo.ProtoReflect.Descriptor instead.
func (*LicenseInfo) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{8}
}

func (x *LicenseInfo) GetStatus() LicenseStatus {
	if x != nil {
		return x.Status
	}
	return LicenseStatus_UNSET
}

func (x *LicenseInfo) GetJson() []byte {
	if x != nil {
		return x.Json
	}
	return nil
}

func (x *LicenseInfo) GetExpires() string {
	if x != nil {
		return x.Expires
	}
	return ""
}

func (x *LicenseInfo) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *LicenseInfo) GetRequestMachineId() []byte {
	if x != nil {
		return x.RequestMachineId
	}
	return nil
}

/// License data.
type License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data           []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                      /// Content of license.
	TermsAgreement bool   `protobuf:"varint,2,opt,name=termsAgreement,proto3" json:"termsAgreement,omitempty"` /// Check if user accepted user agreement.
}

func (x *License) Reset() {
	*x = License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_system_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_system_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_system_api_proto_rawDescGZIP(), []int{9}
}

func (x *License) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *License) GetTermsAgreement() bool {
	if x != nil {
		return x.TermsAgreement
	}
	return false
}

var File_system_api_proto protoreflect.FileDescriptor

var file_system_api_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x62, 0x61, 0x73, 0x65, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7c, 0x0a, 0x0d, 0x52, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3d, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x55, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x10, 0x66, 0x69,
	0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x76, 0x0a,
	0x11, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x06, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xeb, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x07, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2a, 0xbe, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x44, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x4d, 0x41, 0x43, 0x48, 0x49,
	0x4e, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x44,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4d,
	0x41, 0x4c, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x4e,
	0x4f, 0x54, 0x45, 0x52, 0x4d, 0x53, 0x41, 0x47, 0x52, 0x45, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x0a, 0x32, 0xb3, 0x04, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x0f, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x0c, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1c,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x39, 0x0a,
	0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x16, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x16,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1a, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x32, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x11, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x12, 0x0d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x1a, 0x11, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x3b, 0x62, 0x61,
	0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_system_api_proto_rawDescOnce sync.Once
	file_system_api_proto_rawDescData = file_system_api_proto_rawDesc
)

func file_system_api_proto_rawDescGZIP() []byte {
	file_system_api_proto_rawDescOnce.Do(func() {
		file_system_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_system_api_proto_rawDescData)
	})
	return file_system_api_proto_rawDescData
}

var file_system_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_system_api_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_system_api_proto_goTypes = []interface{}{
	(LicenseStatus)(0),             // 0: base.LicenseStatus
	(*Configuration)(nil),          // 1: base.Configuration
	(*ReloadMessage)(nil),          // 2: base.ReloadMessage
	(*FileDescription)(nil),        // 3: base.FileDescription
	(*FileDescriptions)(nil),       // 4: base.FileDescriptions
	(*FileUploadRequest)(nil),      // 5: base.FileUploadRequest
	(*FileUploadChunkRequest)(nil), // 6: base.FileUploadChunkRequest
	(*FileUploadResponse)(nil),     // 7: base.FileUploadResponse
	(*FileDownloadResponse)(nil),   // 8: base.FileDownloadResponse
	(*LicenseInfo)(nil),            // 9: base.LicenseInfo
	(*License)(nil),                // 10: base.License
	(*NetworkInfo)(nil),            // 11: base.NetworkInfo
	(*Empty)(nil),                  // 12: base.Empty
	(*NameSpace)(nil),              // 13: base.NameSpace
	(*Frames)(nil),                 // 14: base.Frames
}
var file_system_api_proto_depIdxs = []int32{
	11, // 0: base.Configuration.networkInfo:type_name -> base.NetworkInfo
	1,  // 1: base.ReloadMessage.configuration:type_name -> base.Configuration
	3,  // 2: base.FileDescriptions.fileDescriptions:type_name -> base.FileDescription
	3,  // 3: base.FileUploadRequest.fileDescription:type_name -> base.FileDescription
	3,  // 4: base.FileUploadChunkRequest.fileDescription:type_name -> base.FileDescription
	0,  // 5: base.LicenseInfo.status:type_name -> base.LicenseStatus
	12, // 6: base.SystemService.GetConfiguration:input_type -> base.Empty
	13, // 7: base.SystemService.ListSignals:input_type -> base.NameSpace
	6,  // 8: base.SystemService.UploadFileChunk:input_type -> base.FileUploadChunkRequest
	5,  // 9: base.SystemService.UploadFile:input_type -> base.FileUploadRequest
	4,  // 10: base.SystemService.BatchDeleteFiles:input_type -> base.FileDescriptions
	4,  // 11: base.SystemService.BatchDownloadFiles:input_type -> base.FileDescriptions
	12, // 12: base.SystemService.ReloadConfiguration:input_type -> base.Empty
	12, // 13: base.SystemService.GetLicenseInfo:input_type -> base.Empty
	10, // 14: base.SystemService.SetLicense:input_type -> base.License
	1,  // 15: base.SystemService.GetConfiguration:output_type -> base.Configuration
	14, // 16: base.SystemService.ListSignals:output_type -> base.Frames
	7,  // 17: base.SystemService.UploadFileChunk:output_type -> base.FileUploadResponse
	7,  // 18: base.SystemService.UploadFile:output_type -> base.FileUploadResponse
	12, // 19: base.SystemService.BatchDeleteFiles:output_type -> base.Empty
	8,  // 20: base.SystemService.BatchDownloadFiles:output_type -> base.FileDownloadResponse
	2,  // 21: base.SystemService.ReloadConfiguration:output_type -> base.ReloadMessage
	9,  // 22: base.SystemService.GetLicenseInfo:output_type -> base.LicenseInfo
	9,  // 23: base.SystemService.SetLicense:output_type -> base.LicenseInfo
	15, // [15:24] is the sub-list for method output_type
	6,  // [6:15] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_system_api_proto_init() }
func file_system_api_proto_init() {
	if File_system_api_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_system_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDescriptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUploadChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDownloadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_system_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_system_api_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ReloadMessage_Configuration)(nil),
		(*ReloadMessage_ErrorMessage)(nil),
	}
	file_system_api_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*FileUploadRequest_FileDescription)(nil),
		(*FileUploadRequest_Chunk)(nil),
	}
	file_system_api_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*FileUploadResponse_Finished)(nil),
		(*FileUploadResponse_Cancelled)(nil),
		(*FileUploadResponse_ErrorMessage)(nil),
	}
	file_system_api_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*FileDownloadResponse_Chunk)(nil),
		(*FileDownloadResponse_ErrorMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_system_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_system_api_proto_goTypes,
		DependencyIndexes: file_system_api_proto_depIdxs,
		EnumInfos:         file_system_api_proto_enumTypes,
		MessageInfos:      file_system_api_proto_msgTypes,
	}.Build()
	File_system_api_proto = out.File
	file_system_api_proto_rawDesc = nil
	file_system_api_proto_goTypes = nil
	file_system_api_proto_depIdxs = nil
}
